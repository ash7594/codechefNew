#include<bits/stdc++.h>
#define MAXV 1000000007
#define modinv 500000004
#define gc getchar_unlocked
using namespace std;

int read_int() {
      char c = gc();
        while(c<'0' || c>'9') c = gc();
          int ret = 0;
          while(c>='0' && c<='9') {
                  ret = 10 * ret + c - 48;
                      c = gc();
                        }
            return ret;
}

///////////////////////////////////
// ASH - AVL IMPLE TAKEN FROM GEEKS FOR GEEKS
///////////////////////////////////
// An AVL tree node
struct node
{
    int key;
    struct node *left;
    struct node *right;
    int height;
    int size; // size of the tree rooted with this node
};
 
// A utility function to get maximum of two integers
int max(int a, int b);
 
// A utility function to get height of the tree rooted with N
int height(struct node *N)
{
    if (N == NULL)
        return 0;
    return N->height;
}
 
// A utility function to size of the tree of rooted with N
int size(struct node *N)
{
    if (N == NULL)
        return 0;
    return N->size;
}
 
// A utility function to get maximum of two integers
int max(int a, int b)
{
    return (a > b)? a : b;
}
 
/* Helper function that allocates a new node with the given key and
    NULL left and right pointers. */
struct node* newNode(int key)
{
    struct node* node = (struct node*)
                        malloc(sizeof(struct node));
    node->key   = key;
    node->left   = NULL;
    node->right  = NULL;
    node->height = 1;  // new node is initially added at leaf
    node->size = 1;
    return(node);
}
 
// A utility function to right rotate subtree rooted with y
struct node *rightRotate(struct node *y)
{
    struct node *x = y->left;
    struct node *T2 = x->right;
 
    // Perform rotation
    x->right = y;
    y->left = T2;
 
    // Update heights
    y->height = max(height(y->left), height(y->right))+1;
    x->height = max(height(x->left), height(x->right))+1;
 
    // Update sizes
    y->size = size(y->left) + size(y->right) + 1;
    x->size = size(x->left) + size(x->right) + 1;
 
    // Return new root
    return x;
}
 
// A utility function to left rotate subtree rooted with x
struct node *leftRotate(struct node *x)
{
    struct node *y = x->right;
    struct node *T2 = y->left;
 
    // Perform rotation
    y->left = x;
    x->right = T2;
 
    //  Update heights
    x->height = max(height(x->left), height(x->right))+1;
    y->height = max(height(y->left), height(y->right))+1;
 
    // Update sizes
    x->size = size(x->left) + size(x->right) + 1;
    y->size = size(y->left) + size(y->right) + 1;
 
    // Return new root
    return y;
}
 
// Get Balance factor of node N
int getBalance(struct node *N)
{
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}
 
// Inserts a new key to the tree rotted with node. Also, updates *count
// to contain count of smaller elements for the new key
struct node* insert(struct node* node, int key, int *count)
{
    /* 1.  Perform the normal BST rotation */
    if (node == NULL)
        return(newNode(key));
 
    if (key < node->key)
        node->left  = insert(node->left, key, count);
    else
    {
        node->right = insert(node->right, key, count);
 
        // UPDATE COUNT OF SMALLER ELEMENTS FOR KEY
        *count = *count + size(node->left) + 1;
    }
 
 
    /* 2. Update height and size of this ancestor node */
    node->height = max(height(node->left), height(node->right)) + 1;
    node->size   = size(node->left) + size(node->right) + 1;
 
    /* 3. Get the balance factor of this ancestor node to check whether
       this node became unbalanced */
    int balance = getBalance(node);
 
    // If this node becomes unbalanced, then there are 4 cases
 
    // Left Left Case
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
 
    // Right Right Case
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);
 
    // Left Right Case
    if (balance > 1 && key > node->left->key)
    {
        node->left =  leftRotate(node->left);
        return rightRotate(node);
    }
 
    // Right Left Case
    if (balance < -1 && key < node->right->key)
    {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
 
    /* return the (unchanged) node pointer */
    return node;
}
 
// The following function updates the countSmaller array to contain count of
// smaller elements on right side.
void constructLowerArray (int arr[], int countSmaller[], long long n)
{
  int i, j;
  struct node *root = NULL;
 
  // initialize all the counts in countSmaller array as 0
  for  (i = 0; i < n; i++)
     countSmaller[i] = 0;
 
  // Starting from rightmost element, insert all elements one by one in
  // an AVL tree and get the count of smaller elements
  for (i = n-1; i >= 0; i--)
  {
     root = insert(root, arr[i], &countSmaller[i]);
  }
}
 
/* Utility function that prints out an array on a line */
//void printArray(int arr[], int size)
//{
//  int i;
//  printf("\n");
//  for (i=0; i < size; i++)
//    printf("%d ", arr[i]);
//}
// 
//// Driver program to test above functions
//int main()
//{
//  int arr[] = {10, 6, 15, 20, 30, 5, 7};
//  int n = sizeof(arr)/sizeof(arr[0]);
// 
//  int *low = (int *)malloc(sizeof(int)*n);
// 
//  constructLowerArray(arr, low, n);
// 
//  printf("Following is the constructed smaller count array");
//  printArray(low, n);
//  return 0;
//}
//
///////////////////////////////////

long long fact[100001];
long long fact2[100001];

void init() {
	fact[0] = 1;
	fact2[0] = 1;
	fact2[1] = 1;
	for (long long i=1;i<=100000;i++) {
		fact[i] = (i*fact[i-1])%MAXV;
	}
	//for (long long i=1;i<=100000;i++) {
	//	fact[i] = (i*fact[i-1])%2;
	//}
}

long long parity(int arr[], long long n) {

	//int n = sizeof(arr)/sizeof(arr[0]);

	  //int *low = (int *)malloc(sizeof(int)*n);

	    //constructLowerArray(arr, low, n);

	long long a = 0;
//	for (long long i=0;i<n-1;i++) {
//		for (long long j=i+1;j<n;j++) {
//			if (arr[i] > arr[j]) a++;
//		}
//	}

	for (long long i=0;i<n;i++) {
		a += arr[i];
	}

	return a%2;
}

long long parity2(long long arr[], long long n) {
	long long a = 0;
	long long d = 0;
	for (long long i=1;i<=n;i++) {
		d = arr[i-1] - i;
		if (d > 0) {
			a += d;
		}
	}
	return a%2;
}

long long position(int q[], int qlow[], long long n) {
	long long a = 0;
	long long temp;
	//vector<int> v;
	for (long long i=0;i<n;i++) {
//		for (long long j=i;j<n;j++) {
//			v.push_back(q[j]);
//		}
//		sort(v.begin(),v.end());
		//copy(v.begin(),v.end(),ostream_iterator<int>(cout," "));
		//cout<<endl;
		//temp = ((find(v.begin(),v.end(),q[i])-v.begin())*fact[n-i-1])%MAXV;
		temp = (qlow[i] * fact[n-i-1])%MAXV;
		
		a = (a+temp)%MAXV;
		//cout<<a<<endl;
		//v.erase(v.begin(),v.end());
	}
	return a;
}

int main () {
	init();
	long long t,n,k,p1,q1,a,temp;
	cin>>t;
	while (t--) {
		cin>>n>>k;
		a = 0;
		int p[n],q[n];
		int *plow = (int *)malloc(sizeof(int)*n);
		int *qlow = (int *)malloc(sizeof(int)*n);

		for (long long i=0;i<n;i++) {
			cin>>p[i];
		}

		for (long long i=0;i<n;i++) {
			cin>>q[i];
		}

		if (n == k) {
		for (long long i=0;i<n;i++) {
			if (p[i] == 1) p1 = i;
			if (q[i] == 1) q1 = i;
		}

		for (long long i=0;i<n;i++) {
			if (p[(i+p1)%n] != q[(i+q1)%n]) {
				cout<<"-1\n";
				goto end;
			}
		}
		cout<<q[0]<<endl;
		goto end;
		}

		constructLowerArray(p, plow, n);
		constructLowerArray(q, qlow, n);
		if (k%2 == 0) {
			a = position(q,qlow,n);
			cout<<(a+1)%MAXV<<endl;
			goto end;
		} else {
			p1 = parity(plow,n);
			q1 = parity(qlow,n);
			if (p1 != q1) {
				cout<<"-1\n";
				goto end;
			}
			a = position(q,qlow,n);
			if (q[n-2] > q[n-1]) { //even
				a--;
				if (a<0) a += MAXV;
			}

			a = (a*modinv)%MAXV;
			cout<<(a+1)%MAXV<<endl;
		}

		end:;
	}
	return 0;
}
